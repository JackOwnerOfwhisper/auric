# Auric Programming Language

üöÄ A modern, simple programming language that compiles to C

Auric makes systems programming more approachable by providing a clean, familiar syntax while maintaining the performance and portability of C. Write code that looks like modern languages, get the speed of C.

## ‚ú® Features

- **Clean Syntax**: Rust/Go-inspired syntax that's much more readable than C
- **C Performance**: Compiles directly to C for maximum performance and portability
- **Type Inference**: Smart type inference reduces boilerplate
- **Built-in Functions**: Common operations like `print()` and `input()` work out of the box
- **Full Compiler Pipeline**: Complete lexer ‚Üí parser ‚Üí AST ‚Üí codegen implementation
- **Debugging Tools**: Built-in token and AST visualization for development

## üéØ Quick Example

**Auric code:**
```auric
fn main() {
    print("Hello from Auric!")
    let x = 5 + 3
    print("Result:", x)
    
    if (x > 5) {
        print("x is greater than 5!")
    }
}
```

**Generated C code:**
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void main() {
    printf("%s\n", "Hello from Auric!");
    double x = (5 + 3);
    printf("%s %.6g\n", "Result:", x);
    if ((x > 5)) {
        printf("%s\n", "x is greater than 5!");
    }
}
```

## üõ† Installation

### Prerequisites
- C++ compiler (g++ or clang++)
- GCC (for compiling generated C code)

### Building Auric
```bash
git clone https://github.com/JackOwnerOfwhisper/auric.git
cd auric
g++ -std=c++20 -o auric *.cpp
```

### Usage
```bash
# Compile an Auric file
./auric hello.auric

# Compile and automatically build the executable
AURIC_AUTO_COMPILE=1 ./auric hello.auric

# Compile, build, and run
AURIC_RUN=1 AURIC_AUTO_COMPILE=1 ./auric hello.auric

# Debug mode (show tokens and AST)
AURIC_DEBUG_TOKENS=1 AURIC_DEBUG_AST=1 ./auric hello.auric
```

## üìù Language Syntax

### Variables
```auric
let name = "World"
let age = 25
let pi = 3.14159
let is_valid = true
```

### Functions
```auric
fn greet(name) {
    print("Hello, " + name + "!")
}

fn calculate(x, y) {
    let result = x * y
    return result
}
```

### Control Flow
```auric
// If statements
if (age >= 18) {
    print("Adult")
} else {
    print("Minor")
}

// While loops
let i = 0
while (i < 5) {
    print("Count:", i)
    i = i + 1
}
```

### Built-in Functions
```auric
print("Hello")              // Print with newline
print("Value:", 42)         // Print multiple values
let input_text = input()    // Read user input
let text_len = len("hello") // String length
let num_str = str(123)      // Convert number to string
```

## üìÅ Example Programs

### Hello World
```auric
fn main() {
    print("Hello, Auric!")
    let name = "World"
    print("Greetings, " + name)
}
```

### Mathematical Calculations
```auric
fn calculate(x, y) {
    let sum = x + y
    let product = x * y
    print("Sum:", sum)
    print("Product:", product)
    return sum
}

fn main() {
    let a = 5
    let b = 3
    let result = calculate(a, b)
    
    if (result > 10) {
        print("Result is large!")
    } else {
        print("Result is small")
    }
}
```

### Loops and Counting
```auric
fn main() {
    let i = 0
    while (i < 5) {
        print("Count:", i)
        i = i + 1
    }
    print("Done counting!")
}
```

## üéõ Command Line Options

```
Usage: auric [options] <input.auric>

Options:
  -o <file>    Specify output file (default: input.c)
  -h, --help   Show help message
  -v           Verbose output
  --version    Show version information

Environment Variables:
  AURIC_DEBUG_TOKENS  Print token stream
  AURIC_DEBUG_AST     Print abstract syntax tree
  AURIC_AUTO_COMPILE  Automatically compile generated C code
  AURIC_RUN          Run the compiled executable
```

## ‚ö° Current Limitations (v1.0)

Auric v1 is a functional but intentionally limited first release. Current limitations include:

- **Types**: Limited to numbers (double), strings (char*), and booleans (int)
- **Memory**: Fixed-size string buffers, no dynamic allocation
- **Collections**: No arrays, lists, or other data structures
- **Functions**: All functions return void, no overloading
- **Scope**: Simple global scope tracking
- **Standard Library**: Minimal built-in functions

These limitations keep the v1 implementation clean and focused while still providing a useful programming experience.

## üöÄ Roadmap

**v1.1 - Near Term:**
- [ ] For loops
- [ ] Better error messages
- [ ] Basic arrays
- [ ] Function return types

**v2.0 - Medium Term:**
- [ ] Structs/custom types
- [ ] Dynamic memory management
- [ ] Module system
- [ ] Expanded standard library

**v3.0 - Long Term:**
- [ ] Generics/templates
- [ ] Advanced memory safety
- [ ] Package manager
- [ ] IDE integration

## ü§ù Contributing

Contributions are welcome! This is an educational project, so we especially appreciate:

- Bug reports and fixes
- Documentation improvements
- Example programs
- Feature suggestions
- Performance improvements

Please feel free to open issues or submit pull requests.

## üìÑ License

MIT License - feel free to use Auric in your projects!

## üôè Acknowledgments

Auric was inspired by the desire to make systems programming more accessible while maintaining the performance characteristics that make C valuable. Special thanks to the compiler design community for excellent resources on building programming languages.

---

**Made with ‚ù§Ô∏è and way too much C++ code**

*Auric v1.0 - Making C programming pleasant since 2024*c
